// 🐟 Function modifying struct
grrrfnrrg heal(murloc)
mrgl
    murloc.health = murloc.health + 50
    grrrtn murloc
grl

// 🐟 Variables
grrr name = "Mrglglgl"
grrr age = 30

// 🐟 Function with parameter and return
grrrfnrrg greeting(name)
mrgl
    glglrr "Hello, " + name + "!"
grl

// 🐟 Struct definition
rrkgr Murloc
mrgl
    name: blbtxt,
    level: numblrr,
    health: numblrr,
grl

// 🐟 Array and for-loop
grrip clan ["Mrggl", "Brgl", "Trgl"]

mrrg member blgr clan
mrgl
    glglrr "Murloc in clan: " + member
grl

// 🐟 If/Else condition
grlbrr (age >= 60)
mrgl
    glglrr name + " is a wise murloc!"
grl
blrrgl
mrgl
    glglrr name + " is a young murloc!"
grl

// 🐟 While loop with break
gglrbl (age > 1)
mrgl
    glglrr "Countdown: " + age
    age = age - 1

    grlbrr age < 40
    mrgl
        flurg
    grl
grl

// 🐟 Function grrrblbl
grrrblbl greeting(name)

// 🐟 Struct instance
grrr chief_murloc = Murloc { name: "Grrmrgl", level: 10, health: 100 }
glglrr "Chief murloc: " + chief_murloc.name + ", Level: " + chief_murloc.level

glglrr chief_murloc.level

// 🐟 Function that returns a value
grrrfnrrg calculate_experience(level)
mrgl
    grrr experience = level * 100
    grrrtn experience
grl

grrr xp = grrrblbl calculate_experience(2)
glglrr "Chief XP: " + xp

// 🐟 Switch (murrrgh)
grrr murloc_type = "sdffsdf"

murrrgh murloc_type
mrgl
    grlblgl "Coastal":
        glglrr "Lives near the shore."
    grlblgl "Deep":
        glglrr "Dwells in dark waters."
    grlblgl "Warrior":
        glglrr "Fights with claws and rage!"
    blrrghlt:
        glglrr "Unknown Murloc type."
grl

// 🐟 Async/Await
argl grrrfnrrg fetch_treasure()
mrgl
    glglrr "Searching for treasure..."
    grrrtn "Golden Fish!"
grl

grrr treasure = grrrblbl fetch_treasure()
glglrr "Treasure found: " + treasure

// 🐟 Try/Catch
mrglgl
mrgl
    grrr x = 10 / 0
    glglrr x
grl
mrglurp (err)
mrgl
    glglrr "MRGL ERROR: " + err
grl

// 🐟 Threading
splurg thread1
mrgl
    glglrr "Running on a separate thread..."
    grrr counter = 0
    mrrg counter = 0; counter <= 64; counter = counter + 1
    mrgl
        glglrr "Thread counter: " + counter
    grl
grl

mrgurl thread1

glglrr "Program finished!"

