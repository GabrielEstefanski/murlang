     grrrfnrrg fibonacci_rec (n)
        mrgl
            mrglif (n < 0)
            mrgl
                grrr retorno = 0
                grrrtn retorno
            grl
            
            mrglif (n == 0)
            mrgl
                grrr retorno = 0
                grrrtn retorno
            grl

            mrglif n == 1
            mrgl
                grrr retorno = 1
                grrrtn retorno
            grl

            grrprint "Calculando fibonacci_rec(" + n + ")"
            grrr n1 = n - 1
            grrrblbl fibonacci_rec(n1)

            grrr fib_n1 = retorno

            grrr n2 = n - 2
            grrrblbl fibonacci_rec(n2)

            grrr fib_n2 = retorno

            grrr resultado = fib_n1 + fib_n2
            grrprint "fibonacci_rec(" + n + ") = " + resultado

            grrr retorno = resultado
            grrrtn retorno
        grl

        // Função para calcular Fibonacci em paralelo com threads
        grrrfnrrg fibonacci_paralelo (n)
        mrgl
            mrglif (n <= 1)
            mrgl
                grrr retorno = n
                grrrtn retorno
            grl

            // Spawn de thread para calcular fib(n-1)
            mrglspawn thread_fib_n1
            mrgl
                grrprint "Thread calculando fib(" + (n-1) + ")"
                grrrblbl fibonacci_rec(n-1)
                grrprint "Thread concluiu fib(" + (n-1) + ") = " + retorno
            grl

            // Calcular fib(n-2) na thread principal
            grrprint "Thread principal calculando fib(" + (n-2) + ")"
            grrrblbl fibonacci_rec(n-2)
            grrr fib_n2 = retorno

            // Aguardar a conclusão da thread
            mrglwait thread_fib_n1

            // Somar os resultados
            grrr fib_n1 = retorno
            grrr resultado = fib_n1 + fib_n2
            grrprint "fibonacci_paralelo(" + n + ") = " + resultado
            
            grrr retorno = resultado
            grrrtn retorno
        grl

        // Função para calcular Fibonacci usando um pool de threads
        grrrfnrrg fibonacci_pool (n)
        mrgl
            mrglif (n < 10)
            mrgl
                grrrblbl fibonacci_rec(n)
                grrrtn retorno
            grl

            grrprint "Usando pool de threads para calcular Fibonacci de " + n
            
            // Criar um pool com 4 threads
            fshpoolsize 4
            fshpool
            mrgl
                // Tarefa 1: Calcular fib(n-1)
                mrglspawn task1
                mrgl
                    grrprint "Tarefa 1 calculando fib(" + (n-1) + ")"
                    grrrblbl fibonacci_rec(n-1)
                    grrprint "Tarefa 1 obteve: " + retorno
                grl

                // Tarefa 2: Calcular fib(n-2)
                mrglspawn task2
                mrgl
                    grrprint "Tarefa 2 calculando fib(" + (n-2) + ")"
                    grrrblbl fibonacci_rec(n-2)
                    grrprint "Tarefa 2 obteve: " + retorno
                grl
            grl

            // Aguardar conclusão das tarefas
            mrglwait task1
            grrr fib_n1 = retorno
            
            mrglwait task2
            grrr fib_n2 = retorno

            grrr resultado = fib_n1 + fib_n2
            grrprint "fibonacci_pool(" + n + ") = " + resultado
            
            grrr retorno = resultado
            grrrtn retorno
        grl

        // Função assíncrona para demonstrar async/await
        mrglasync grrrfnrrg fibonacci_async (n)
        mrgl
            mrglif (n <= 1)
            mrgl
                grrr retorno = n
                grrrtn retorno
            grl

            // Criar future para fib(n-1)
            grrr future_n1 = mrglasync grrrblbl fibonacci_async(n-1)
            
            // Calcular fib(n-2) enquanto isso
            grrrblbl fibonacci_async(n-2)
            grrr fib_n2 = retorno
            
            // Aguardar completude do future
            mrglawait future_n1
            grrr fib_n1 = retorno
            
            grrr resultado = fib_n1 + fib_n2
            grrprint "fibonacci_async(" + n + ") = " + resultado
            
            grrr retorno = resultado
            grrrtn retorno
        grl

        // Programa principal
        grrprint "Calculando Fibonacci de 10 sequencialmente:"
        grrrblbl fibonacci_rec(10)
        grrprint "Resultado sequencial: " + retorno

        grrprint "Calculando Fibonacci de 10 em paralelo:"
        grrrblbl fibonacci_paralelo(10)
        grrprint "Resultado paralelo: " + retorno

        grrprint "Calculando Fibonacci de 20 com pool de threads:"
        grrrblbl fibonacci_pool(10)
        grrprint "Resultado com pool: " + retorno
